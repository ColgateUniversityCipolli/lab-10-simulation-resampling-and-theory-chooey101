library(tidyverse)
sim.study <- rbinom(n=1000, size=10000, prob=0.39) #Random binom sample
sim.study <- rbinom(n=10000, size=1000, prob=0.39) #Random binom sample
data <- tibble(x = sim.study)
View(data)
View(data)
R <- 1000
resamples <- tibble(p.hat = numeric(R))
for( i in 1:R){
curr.resample <- sample(x = data$x,
size = nrow(data),
replace = T)
# compute the stat on the resample
resamples$p.hat[i] <- mean(curr.resample)
}
View(resamples)
ggplot(resamples) +
geom_histogram(aes(x=x, y=after_stat(density)),
breaks=seq(1.4, 2.7,0.10),
color="grey")+
geom_hline(yintercept=0)+
theme_bw()+
xlab(bquote(p))+
ylab("Density")
ggplot(resamples) +
geom_histogram(aes(x=p.hat, y=after_stat(density)),
breaks=seq(1.4, 2.7,0.10),
color="grey")+
geom_hline(yintercept=0)+
theme_bw()+
xlab(bquote(p))+
ylab("Density")
ggplot(resamples) +
geom_histogram(aes(x=p.hat, y=after_stat(density)),
color="grey")+
geom_hline(yintercept=0)+
theme_bw()+
xlab(bquote(p))+
ylab("Density")
ggplot(resamples) +
geom_histogram(aes(x=p.hat, y=after_stat(density)),
color="grey")+
geom_density(color = "red", linewidth = 1) +
geom_hline(yintercept=0)+
theme_bw()+
xlab(bquote(p))+
ylab("Density")
ggplot(resamples) +
geom_histogram(aes(x=p.hat, y=after_stat(density)),
color="grey")+
geom_hline(yintercept=0)+
theme_bw()+
xlab(bquote(p))+
ylab("Density")
R <- 1000
resamples <- tibble(p.hat = numeric(R))
ggplot(resamples) +
geom_histogram(aes(x=p.hat, y=after_stat(density)),
color="grey")+
geom_hline(yintercept=0)+
geom_density(color = "red", linewidth = 1) +
theme_bw()+
xlab(bquote(p))+
ylab("Density")
ggplot(resamples) +
geom_histogram(aes(x=p.hat, y=after_stat(density)),
color="grey")+
geom_hline(yintercept=0)+
theme_bw()+
xlab(bquote(p))+
ylab("Density")
ggplot(resamples) +
geom_histogram(aes(x=p.hat, y=after_stat(density)),
color="grey")+
geom_hline(yintercept=0)+
theme_bw()+
xlab(bquote(p))+
ylab("Density")
ggplot(resamples) +
geom_histogram(aes(x=p.hat, y=after_stat(density)),
color="grey")+
geom_hline(yintercept=0)+
theme_bw()+
xlab(bquote(p))+
ylab("Density")
ggplot(resamples) +
geom_histogram(aes(x=, y=after_stat(density)),
breaks=seq(1.4, 2.7,0.10),
color="grey")+
geom_hline(yintercept=0)+
theme_bw()+
xlab(bquote(p))+
ylab("Density")
ggplot(resamples) +
geom_histogram(aes(x=p.hat, y=after_stat(density)),
breaks=seq(1.4, 2.7,0.10),
color="grey")+
geom_hline(yintercept=0)+
theme_bw()+
xlab(bquote(lambda))+
ylab("Density")
ggplot(resamples) +
geom_histogram(aes(x=p.hat, y=after_stat(density)),
color="grey")+
geom_hline(yintercept=0)+
theme_bw()+
xlab("p.hat")+
ylab("Density")
ggplot(resamples) +
geom_histogram(aes(x=p.hat, y=after_stat(density)),
color="grey")+
geom_hline(yintercept=0)+
xlab("p.hat")+
ylab("Density")
ggplot(resamples) +
geom_histogram(aes(x=p.hat, y=after_stat(density)),
color="grey")+
geom_hline(yintercept=0)+
xlab("p.hat")+
ylab("Density")
ggplot(resamples) +
geom_histogram(aes(x=p.hat, y=after_stat(density)),
bins = 30,
color="grey")+
geom_hline(yintercept=0)+
xlab("p.hat")+
ylab("Density")
ggplot(resamples) +
geom_histogram(aes(x=p.hat, y=after_stat(density)),
bins = 30,
color="grey")+
geom_hline(yintercept=0)+
xlab("p.hat")+
ylab("Density")
sim.study <- rbinom(n=10000, size=1000, prob=0.39) #Random binom sample
data <- tibble(x = sim.study)
R <- 1000
resamples <- tibble(p.hat = numeric(R))
for( i in 1:R){
curr.resample <- sample(x = data$x,
size = nrow(data),
replace = T)
# compute the stat on the resample
resamples$p.hat[i] <- mean(curr.resample)
}
library(tidyverse)
data <- tibble(x = sim.study)
resamples <- tibble(p.hat = numeric(R))
for( i in 1:R){
curr.resample <- sample(x = data$x,
size = nrow(data),
replace = T)
# compute the stat on the resample
resamples$p.hat[i] <- mean(curr.resample)
}
View(resamples)
View(data)
View(resamples)
View(resamples)
View(resamples)
resample.plot <- ggplot(resamples) +
geom_histogram(aes(x=p.hat, y=after_stat(density)),
color="grey")+
geom_hline(yintercept=0)+
xlab("p.hat")+
ylab("Density")
resample.plot
resample.plot <- ggplot(resamples) +
geom_histogram(aes(x=p.hat, y=after_stat(density)),
color="grey")+
geom_density(color = "red", linewidth = 1) +
labs(
x = "Value",
y = "Density"
) +
geom_hline(yintercept=0)+
xlab("p.hat")+
ylab("Density")
resample.plot
resample.plot <- ggplot(resamples, aes(x = p.hat)) +
geom_histogram(aes(y = after_stat(density)), binwidth = 0.01, color = "grey", fill = "white") +
geom_density(color = "red", linewidth = 1) +
geom_hline(yintercept = 0) +
labs(x = "p.hat", y = "Density")
resample.plot
n_values <- seq(100, 3000, by = 10)
p_values <- seq(0.01, 0.99, by = 0.01)
stored_values <- tibble(
n=numeric(),
p=numeric(),
p_hat=numeric(),
moe=numeric()
)
stored_values <- tibble(
n=numeric(),
p=numeric(),
p_hat=numeric(),
moe=numeric()
)
for (n in n_values) {
for (p in p_values) {
# Run 10,000 simulations and calculate p.hat = x/n
sim <- rbinom(n = 10000, size = n, prob = p) / n
# Store the results in a data frame
temp_df <- tibble(
n = n,
p = p,
p_hat = sim,
moe <- (quantile(p_hat, 0.975) - quantile(p_hat, 0.025)) / 2
)
stored_values <- rbind(stored_values, temp_df)
}
}
View(stored_values)
library(tidyverse)
stored_values <- tibble(
n = numeric(),
p = numeric(),
p_hat = numeric(),
moe = numeric()
)
n_values <- seq(100, 3000, by = 10)
p_values <- seq(0.01, 0.99, by = 0.01)
for (n in n_values) {
for (p in p_values) {
sim <- rbinom(n = 10000, size = n, prob = p) / n
moe <- (quantile(sim, 0.975) - quantile(sim, 0.025)) / 2
temp_df <- tibble(
n = n,
p = p,
p_hat = mean(sim),
moe = moe
)
stored_values <- rbind(stored_values, temp_df)
}
}
View(temp_df)
simulation_plot <- ggplot(stored_values, aes(x = p, y = n, fill = moe)) +
geom_raster() +
scale_fill_viridis_c(option = "plasma") +
labs(
title = "Margin of Error by Sample Size (n) and Probability (p)",
x = "True Probability (p)",
y = "Sample Size (n)",
fill = "Margin of Error"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12)
)
simulation_plot
grid <- expand.grid(n = n_values, p = p_values)
wilson_moe <- function(n, p, z = qnorm(0.975)) {
numerator <- z * sqrt(p * (1 - p) + (z^2 / (4 * n^2)))
denominator <- 1 + (z^2 / n)
return(numerator / denominator)
}
grid$moe <- mapply(wilson_moe, grid$n, grid$p)
View(grid)
View(stored_values)
View(grid)
grid$moe <- mapply(wilson_moe, grid$n, grid$p)
# Convert to tibble
wilson_data <- as_tibble(grid)
wilson_plot <- ggplot(wilson_data, aes(x = p, y = n, fill = moe)) +
geom_raster() +
scale_fill_viridis_c(option = "magma", direction = -1) +
labs(
title = "Wilson Margin of Error by Sample Size (n) and Probability (p)",
x = "True Proportion (p)",
y = "Sample Size (n)",
fill = "MOE"
) +
theme_minimal()
